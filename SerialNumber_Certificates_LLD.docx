# Low Level Design (LLD) - Adding Serial Number to Certificate Commands

## 1. Overview
This document outlines the implementation of a new CLI command `om get-certificates` that fetches deployed certificates from Ops Manager and enriches them with serial numbers extracted from PEM certificates.

## 2. Problem Statement
- Users need to programmatically access certificate serial numbers from Ops Manager
- The `/api/v0/deployed/certificates` endpoint doesn't provide serial numbers
- Manual extraction via `openssl` is time-consuming and error-prone
- Need for efficient, concurrent processing of multiple certificates

## 3. Solution Architecture

### 3.1 High-Level Flow
```
1. Fetch deployed certificates → 2. Filter by product → 3. Fetch credentials → 4. Extract serials → 5. Output JSON
```

### 3.2 API Integration Points
- **GET `/api/v0/deployed/certificates`** - Fetch all deployed certificates
- **GET `/api/v0/deployed/products`** - Map product GUIDs to types
- **GET `/api/v0/deployed/products/{guid}/credentials/{property_reference}`** - Fetch PEM certificates

## 4. Technical Implementation

### 4.1 Command Structure
```go
// ... existing code ...
```

### 4.2 Data Flow
1. **Certificate Fetching**: `ListDeployedCertificates()` → `[]ExpiringCertificate`
2. **Product Mapping**: `ListDeployedProducts()` → `map[string]string` (GUID → Type)
3. **Filtering**: Filter certificates by specified product type
4. **Credential Fetching**: Concurrent calls to `GetDeployedProductCredential()`
5. **Serial Extraction**: Parse PEM → Extract serial using `crypto/x509`
6. **Output**: Pretty JSON with embedded error handling

### 4.3 Concurrency Model
```go
// Semaphore pattern for controlled concurrency
sem := make(chan struct{}, 10) // Limit to 10 concurrent operations
var wg sync.WaitGroup

for i, cert := range filteredCerts {
    wg.Add(1)
    go func(i int, cert api.ExpiringCertificate) {
        defer wg.Done()
        sem <- struct{}{}        // Acquire
        defer func() { <-sem }() // Release
        // Process certificate
    }(i, cert)
}
```

### 4.4 Error Handling Strategy
```go
type certWithSerial struct {
    api.ExpiringCertificate
    Serial string `json:"serial_number"`
    Error  string `json:"error,omitempty"`
}
```

**Error Categories:**
- Missing product_guid/property_reference
- Credential fetch failures
- Missing cert_pem in credential
- Serial extraction failures

## 5. Performance Considerations

### 5.1 Optimization Techniques
- **Product Filtering**: Mandatory `-p` flag reduces processing scope
- **Concurrent Processing**: 10-worker semaphore for credential fetching
- **Go Standard Library**: `crypto/x509` instead of `openssl` binary
- **Early Exit**: Return immediately if no certificates found

### 5.2 Expected Performance
- **Small deployments** (< 10 certs): 2-5 seconds
- **Large deployments** (50+ certs): 10-30 seconds
- **Network latency**: Primary bottleneck for credential fetching

## 6. User Experience

### 6.1 Command Usage
```bash
om get-certificates -p p-bosh
om get-certificates --product cf
```

### 6.2 Output Format
```json
[
  {
    "product_guid": "abc123",
    "property_reference": ".properties.ssl_cert",
    "expires_on": "2024-12-31",
    "serial_number": "1A2B3C4D5E6F7890"
  },
  {
    "product_guid": "def456",
    "property_reference": ".properties.ca_cert",
    "expires_on": "2025-06-15",
    "serial_number": "",
    "error": "failed to fetch credential: connection timeout"
  }
]
```

### 6.3 Progress Feedback
- "Processing X certificates (this may take a moment)..."
- "No certificates found for product 'X'" (when applicable)

## 7. Security Considerations

### 7.1 Certificate Handling
- PEM certificates processed in memory
- No temporary files created
- Serial numbers extracted using Go's crypto library
- No external binary dependencies

### 7.2 API Security
- Uses existing Ops Manager authentication
- Respects existing RBAC permissions
- No additional security risks beyond existing API access

## 8. Testing Strategy

### 8.1 Unit Tests
- Mock API responses
- Test error scenarios
- Validate serial extraction
- Test concurrent processing

### 8.2 Integration Tests
- End-to-end with real Ops Manager
- Test with various product types
- Performance testing with large certificate sets

## 9. Dependencies

### 9.1 Go Packages
```go
import (
    "crypto/x509"
    "encoding/json"
    "encoding/pem"
    "fmt"
    "sync"
    "github.com/pivotal-cf/om/api"
)
```

### 9.2 External Dependencies
- None (uses Go standard library for crypto operations)

## 10. Future Enhancements

### 10.1 Potential Improvements
- **Table output format** alongside JSON
- **Certificate validation** (expiry warnings)
- **Batch processing** for very large deployments
- **Caching** for repeated queries
- **Export formats** (CSV, YAML)

### 10.2 Monitoring
- Add metrics for processing time
- Track success/failure rates
- Monitor API call patterns

## 11. Rollout Plan

### 11.1 Implementation Phases
1. **Phase 1**: Core functionality with JSON output
2. **Phase 2**: Error handling and progress feedback
3. **Phase 3**: Performance optimizations
4. **Phase 4**: Additional output formats

### 11.2 Backward Compatibility
- New command, no breaking changes
- Optional product filtering
- Graceful error handling

This LLD provides a comprehensive blueprint for implementing the serial number feature while ensuring performance, reliability, and user experience. 